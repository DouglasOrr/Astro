#!/usr/bin/env python3

import argparse
import string
import subprocess

IMAGE = 'astro'
SERVER = 'astro-server'
NOTEBOOK = 'astro-notebook'
TENSORBOARD = 'astro-tensorboard'
# >>> IPython.lib.passwd("astro")
NOTEBOOK_PASSWORD = \
    'sha1:a148b9fcf1b4:fa83f953fbd59df90711b90119d8ab214fccff18'


def sh(cmd, **args):
    code = subprocess.call(
        string.Template(cmd).substitute(**args),
        shell=True)
    if code:
        exit(code)


def build():
    sh('docker build --rm -t ${IMAGE} .',
       IMAGE=IMAGE)
    sh('mkdir -p static/lib')
    sh('wget -qO ${DEST} ${SRC}',
       DEST='static/lib/jquery.js',
       SRC='https://code.jquery.com/jquery-3.2.1.min.js')
    sh('wget -qO ${DEST} ${SRC}',
       DEST='static/lib/bootstrap.css',
       SRC='https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css')  # NOQA
    sh('wget -qO ${DEST} ${SRC}',
       DEST='static/lib/popper.js',
       SRC='https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js')  # NOQA
    sh('wget -qO ${DEST} ${SRC}',
       DEST='static/lib/bootstrap.js',
       SRC='https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js')  # NOQA


def run(command):
    sh('docker run --rm -it -v `pwd`:/work -w /work --ipc=host'
       ' ${IMAGE} ${COMMAND}',
       IMAGE=IMAGE,
       COMMAND=' '.join(command))


def test(test_filter):
    run(['pytest astro' +
         (' -k "{}"'.format(test_filter)
          if test_filter is not None else
          '')])
    run(['flake8'])


def server(detach):
    if detach:
        sh('docker rm -f ${SERVER} || true',
           SERVER=SERVER)
    sh('docker run ${DOCKER_ARGS} -v `pwd`:/work -w /work -p ${PORT}:${PORT}'
       ' -e PYTHONPATH=/work -e FLASK_APP=astro.server -e FLASK_DEBUG=${DEBUG}'
       ' ${IMAGE} flask run --host=0.0.0.0 --port ${PORT}',
       IMAGE=IMAGE,
       DEBUG='0' if detach else '1',
       DOCKER_ARGS='-d --name ' + SERVER if detach else '--rm -it',
       PORT=5000)


def notebook():
    sh('docker rm -f ${NAME} || true',
       NAME=NOTEBOOK)
    sh('docker run -d --name ${NAME} -v `pwd`:/work -w /work'
       ' -p 8888:8888 --ipc=host'
       ' ${IMAGE} bash -c "'
       'jupyter notebook'
       ' --allow-root --NotebookApp.password=${NOTEBOOK_PASSWORD} --ip=\'*\''
       '"',
       NAME=NOTEBOOK,
       IMAGE=IMAGE,
       NOTEBOOK_PASSWORD=NOTEBOOK_PASSWORD)
    print('Notebook server running at http://localhost:8888 password: "astro"')


def tensorboard():
    sh('docker rm -f ${NAME} || true',
       NAME=TENSORBOARD)
    sh('docker run -d --name ${NAME} -v `pwd`:/work -w /work'
       ' -p 7777:7777 tensorflow/tensorflow:1.4.1-py3'
       ' tensorboard --port 7777 --logdir out/',
       NAME=TENSORBOARD)
    print('Tensorboard running at http://localhost:7777')


parser = argparse.ArgumentParser(
    description='Runner script for Astro'
)
parser.set_defaults(action=lambda: parser.print_help())
subs = parser.add_subparsers()

subs.add_parser('build').set_defaults(action=build)

p = subs.add_parser('run')
p.add_argument('command', nargs='*', default=[])
p.set_defaults(action=run)

p = subs.add_parser('test')
p.add_argument('-k', '--test-filter', help='Pytest filter expression')
p.set_defaults(action=test)

subs.add_parser('notebook').set_defaults(action=notebook)

subs.add_parser('tensorboard').set_defaults(action=tensorboard)

p = subs.add_parser('server')
p.add_argument('-d', '--detach', action='store_true')
p.set_defaults(action=server)

args = vars(parser.parse_args())
action = args.pop('action')
action(**args)
